#!/usr/bin/env python3

#from __future__ import print_function # Allows python2 and python3 functionality

#try:
#    import tkinter as tk # Python 3
#    from tkinter.colorchooser import askcolor
#except ImportError:
#    import Tkinter as tk # Python 2
#    from Tkinter.colorchooser import askcolor

import tkinter as tk # Python 3 only for now
from tkinter import colorchooser

from matplotlib.backends.backend_tkagg import (
    FigureCanvasTkAgg, NavigationToolbar2Tk)
# Implement the default Matplotlib key bindings.
from matplotlib.backend_bases import key_press_handler
from matplotlib.figure import Figure
    
import matplotlib.pyplot as plt
from glob import glob
import sys
import numpy as np









units = [ "6.9599e10",
          "1.9891e33",
        ]

def read_sph(filename,
         return_header=True,
         return_data=True,
         fmt_header= '2i'+    # ntot, nnopt (2*4=8)
                     '5d'+    # hco, hfloor, sep0, tf, dtout (8*5=40)
                     '2i'+    # nout, nit (2*4=8)
                     'd'+     # t (8)
                     'i'+     # nav (4)
                     '3d'+    # alpha, beta, tjumpahead (3*8=24)
                     '2i'+    # ngr, nrelax (4*2=8)
                     '3d'+    # trelax, dt, omega2 (3*8=24)
                     'i'+     # ncooling (4)
                     'd'+     # erad (8)
                     'i'+     # ndisplace (4)
                     '3d',    # displacex, displacey, displacez (4*8=24),
         fmt_dataline= 'f8,'+ # x
                       'f8,'+ # y
                       'f8,'+ # z
                       'f8,'+ # am
                       'f8,'+ # hp
                       'f8,'+ # rho
                       'f8,'+ # vx
                       'f8,'+ # vy
                       'f8,'+ # vz
                       'f8,'+ # vxdot
                       'f8,'+ # vydot
                       'f8,'+ # vzdot
                       'f8,'+ # u
                       'f8,'+ # udot
                       'f8,'+ # grpot
                       'f8,'+ # meanmolecular
                       'f4,'+ # cc
                       'f8',  # divv
         fmt_extra='',
         size_header=164,
         size_dataline=156,
         size_extra=0,
         lines=0):
    import struct
    import numpy as np
    import sys
    from numpy.lib.recfunctions import repack_fields

    if fmt_extra != '': fmt_extra = ','+fmt_extra
    dsize = size_dataline+size_extra+8
    
    with open(filename,'rb') as f:
        header = np.asarray(struct.unpack('<i'+fmt_header+'d', f.read(4+size_header+8)))[1:-1]
        if lines == 0: lines = int(header[0])

        if int(header[19]) != 0: #if ncooling =/= 0
            fmt_dataline += ',f8,f8'
            dsize+=16

        if return_data:
            try:
                #data = np.ndarray(shape=(1,lines),
                #                  dtype=np.dtype(fmt_dataline+fmt_extra+',f8'),
                #                  buffer=f.read(lines*dsize))[0].astype(dsize*'f8,').view(dtype='f8').reshape(lines,dsize)[:,:-1]
            
                dtype = fmt_dataline+fmt_extra+',f8'
                data = np.zeros((lines,dtype.count(',')+1))
                
                data[:] = np.ndarray(shape=(1,lines),
                                     dtype=np.dtype(dtype),
                                     buffer=f.read(lines*dsize))[0].tolist()[:]
                data=data[:,:-1]
                
            except:
                data = None
                header = None
            

            if return_header: return data,header
            else: return data
        else:
            if return_header: return header


def _read_mesafile(filename, data_rows=0, only='all'):
    # Taken from mesa_read.py written by Kenny X. Van
    ''' private routine that is not directly called by the user'''
    f = open(filename, 'r')
    vv = []
    v = []
    lines = []
    line = ''
    for i in range(0, 6):
        line = f.readline()
        lines.extend([line])

    hval = lines[2].split()
    hlist = lines[1].split()
    header_attr = {}
    for a, b in zip(hlist, hval):
        header_attr[a] = float(b)
    if only is 'header_attr':
        return header_attr

    cols = {}
    colnum = lines[4].split()
    colname = lines[5].split()
    for a, b in zip(colname, colnum):
        cols[a] = int(b)

    data = []

    for i in range(data_rows):
        line = f.readline()
        v = line.split()
        try:
            vv = np.array(v, dtype='float64')
        except ValueError:
            for item in v:
                if item.__contains__('.') and not item.__contains__('E'):
                    v[v.index(item)] = '0'
        data.append(vv)

    #print ' \n'
    f.close()
    a = np.array(data)
    data = []
    return header_attr, cols, a
            
def read_mesa(filename):
    header_attr = _read_mesafile(filename, only='header_attr')
    try:
        num_zones = int(header_attr['num_zones'])
    except KeyError:
        return None,None,None

    header_attr, cols, data = _read_mesafile(filename, data_rows=num_zones, only='all')
    return header_attr,cols,data


def rgb2tk(rgb):
    """translates an rgb tuple of int to a tkinter friendly color code
    """
    return "#%02x%02x%02x" % rgb

class CustomToolbar(NavigationToolbar2Tk):
    def __init__(self,canvas_,parent_):
        self.toolitems = (
            (u'Home', u'Reset original view', u'home', u'home'),
            (u'Pan', u'Pan axes with left mouse, zoom with right', u'move', u'pan'),
            (u'Zoom', u'Zoom to rectangle', u'zoom_to_rect', u'zoom'),
            (u'Subplots', u'Configure subplots', u'subplots', u'configure_subplots'),
            (u'Save', u'Save the figure', u'filesave', u'save_figure'),
            )
        NavigationToolbar2Tk.__init__(self,canvas_,parent_)

class main():
    
    def __init__(self,root):
        self.root = root
        

        self.data = None
        self.header = None

        # Assume an SPH data file by default
        self.variables = [ "x",
                           "y",
                           "z",
                           "m",
                           "h",
                           "rho",
                           "vx",
                           "vy",
                           "vz",
                           "vxdot",
                           "vydot",
                           "vzdot",
                           "u",
                           "udot",
                           "grpot",
                           "meanmolecular",
                           "cc",
                           "divv",
                         ]

        self.sph_mode = True
        self.MESA_mode = False
        
        self.corner_message_text = tk.StringVar()
        self.corner_message_text.set("")
        self.corner_message_label = tk.Label(self.root,textvariable=self.corner_message_text)
        self.corner_message_label.place(rely=1.0,relx=1.0,x=0,y=0,anchor="se")
        
        self.right_frame = tk.Frame()
        self.left_frame = tk.Frame()
        
        self.graph_controls_frame = tk.Frame()
        self.graph_frame = tk.Frame(self.left_frame)
        self.graph_toolbar_frame = tk.Frame()
        self.axes_frame = tk.Frame(self.right_frame)
        self.files_frame = tk.Frame(self.right_frame)
        self.color_frame = tk.Frame(self.right_frame)
        
        
        # Setup the color controls
        self.particle_color = tk.StringVar()
        self.particle_core_color = tk.StringVar()
        self.particle_color.set("#000000")
        self.particle_core_color.set("#000000")
        tk.Label(self.color_frame,text="Particles").grid(row=0,column=0,sticky='W')
        tk.Label(self.color_frame,text="Core particles").grid(row=1,column=0,sticky='W')
        self.particle_color_button = tk.Button(self.color_frame,command=self.choose_particle_color,height=1,width=2,padx=0,pady=0,bg=self.particle_color.get())
        self.particle_core_color_button = tk.Button(self.color_frame,command=self.choose_particle_core_color,height=1,width=2,padx=0,pady=0,bg=self.particle_core_color.get())
        self.particle_color_button.grid(row=0,column=1)
        self.particle_core_color_button.grid(row=1,column=1)
        

        # Setup the axes prompt
        self.axish_var = tk.StringVar()
        self.axisv_var = tk.StringVar()
        self.axish_var.set(self.variables[0])
        self.axisv_var.set(self.variables[1])

        self.axis_menu_width = tk.IntVar()
        self.axis_menu_width.set(20)

        self.axish_label = tk.Label(self.axes_frame,text="Horizontal Axis").grid(row=0,column=0,sticky='w')
        self.axisv_label = tk.Label(self.axes_frame,text="Vertical Axis").grid(row=1,column=0,sticky='w')

        self.axish_menu = tk.OptionMenu(self.axes_frame,self.axish_var,*self.variables,command=self.update_axis_labels)
        self.axisv_menu = tk.OptionMenu(self.axes_frame,self.axisv_var,*self.variables,command=self.update_axis_labels)
        self.axish_menu.config(width=self.axis_menu_width.get())
        self.axisv_menu.config(width=self.axis_menu_width.get())
        self.axish_menu.grid(row=0,column=1)
        self.axisv_menu.grid(row=1,column=1)

        self.axish_islog = tk.IntVar()
        self.axisv_islog = tk.IntVar()
        self.axish_is10 = tk.IntVar()
        self.axisv_is10 = tk.IntVar()
        self.axish_islog.set(0)
        self.axisv_islog.set(0)
        self.axish_is10.set(0)
        self.axisv_is10.set(0)
        smallframeh = tk.Frame(self.axes_frame)
        self.axish_log_button = tk.Checkbutton(smallframeh,command=self.draw_plot,variable=self.axish_islog)
        self.axish_10_button = tk.Checkbutton(smallframeh,command=self.draw_plot,variable=self.axish_is10)
        tk.Label(smallframeh,text="log").grid(row=0,column=1)
        tk.Label(smallframeh,text="10^").grid(row=1,column=1)
        self.axish_log_button.grid(row=0,column=0)
        self.axish_10_button.grid(row=1,column=0)

        smallframeh.grid(row=0,column=2)
        
        smallframev = tk.Frame(self.axes_frame)
        self.axisv_log_button = tk.Checkbutton(smallframev,command=self.draw_plot,variable=self.axisv_islog)
        self.axisv_10_button = tk.Checkbutton(smallframev,command=self.draw_plot,variable=self.axisv_is10)
        tk.Label(smallframev,text="log").grid(row=0,column=1)
        tk.Label(smallframev,text="10^").grid(row=1,column=1)
        self.axisv_log_button.grid(row=0,column=0)
        self.axisv_10_button.grid(row=1,column=0)

        smallframev.grid(row=1,column=2)
        
        
        
        

        # Setup the files prompt
        self.files_var = tk.StringVar()
        if len(sys.argv) > 1:
            self.files_var.set(" ".join(sys.argv[1:]))

        self.files = sys.argv[1:]
        self.files_label = tk.Label(self.files_frame,text="File list").grid(row=0,column=0)
        self.files_text = tk.Entry(self.files_frame,textvariable=self.files_var,width=50)
        self.files_text.bind('<Return>',self.load_files)
        self.files_text.grid(row=0,column=1,padx=(0,3))
        tk.Button(self.files_frame,text="Load",command=self.load_files,width=5,height=1,padx=0,pady=0).grid(row=0,column=2)
        tk.Button(self.files_frame,text="Clear",command=self.clear_files,width=5,height=1,padx=0,pady=0).grid(row=0,column=3)
        self.current_file = tk.StringVar()
        self.current_file.set(self.files_var.get().split(" ")[0])
        self.current_file_idx = tk.IntVar()
        self.current_file_idx.set(0)

        

        # Setup the graph
        self.fig = Figure(figsize=(7,7),dpi=100)
        self.ax = self.fig.add_subplot(111)

        self.particles = []
        self.core_particles = []
        
        self.canvas = FigureCanvasTkAgg(self.fig,master=self.graph_frame)

        self.canvas.get_tk_widget().grid(row=0,column=0)
        self.toolbar = CustomToolbar(self.canvas, self.graph_toolbar_frame)
        self.toolbar.update()
        
        pos = self.ax.get_position()
        self.ax.set_position([0.125,0.125,0.825,0.825])
        self.hlabel = self.fig.text((pos.x1+pos.x0)/2.,0.01,self.axish_var.get(),ha='center')
        self.vlabel = self.fig.text(0.01,(pos.y1+pos.y0)/2.,self.axisv_var.get(),va='center',rotation='vertical')
        
        # Beneath the graph, give user some controls
        self.skip_magnitude = tk.IntVar()
        self.skip_magnitude.set(1)
        self.skip_magnitude_entry = tk.Entry(self.graph_controls_frame,textvariable=self.skip_magnitude,width=5)
        self.skip_magnitude_entry.grid(row=0,column=2)
        self.back_button = tk.Button(self.graph_controls_frame,command=self.previous_file,text="<<",width=2,height=1,padx=5,pady=5).grid(row=0,column=1)
        self.next_button = tk.Button(self.graph_controls_frame,command=self.next_file,text=">>",width=2,height=1,padx=5,pady=5).grid(row=0,column=3)
        self.current_file_label = tk.Label(self.graph_controls_frame,textvariable=self.current_file,padx=10).grid(row=0,column=0)
        
        
        # Draw the frames

        # Right side
        self.files_frame.grid(row=0,column=0)
        self.axes_frame.grid(row=1,column=0)
        self.color_frame.grid(row=2,column=0)

        # Left side
        self.graph_frame.grid(row=0,column=0)
        self.graph_controls_frame.grid(row=1,column=1,sticky='E')
        self.graph_toolbar_frame.grid(row=1,column=0,sticky='W')
        
        self.left_frame.grid(row=0,column=0,columnspan=2)
        self.right_frame.grid(row=0,column=2)


        # Draw the first file
        self.read_file()
        self.draw_plot()

        
        
        

    def choose_particle_color(self,*args):
        self.particle_color.set(colorchooser.askcolor(parent=self.root,initialcolor=self.particle_color.get())[1])
        self.particle_color_button.config(bg=self.particle_color.get())

        for particles in self.particles:
            particles.set_color(self.particle_color.get())

        self.canvas.draw()
        
    def choose_particle_core_color(self,*args):
        self.particle_core_color.set(colorchooser.askcolor(parent=self.root,initialcolor=self.particle_core_color.get())[1])
        self.particle_core_color_button.config(bg=self.particle_core_color.get())

        for core_particles in self.core_particles:
            core_particles.set_color(self.particle_core_color.get())

        self.canvas.draw()


        
    def update_axis_labels(self,*args):
        if self.axish_islog.get() == 1 and self.axish_is10.get() == 0: # Only log10
            self.hlabel.set_text("log "+self.axish_var.get())
        elif self.axish_islog.get() == 0 and self.axish_is10.get() == 1: # Only 10^
            self.hlabel.set_text("10^ "+self.axish_var.get())
        elif self.axish_islog.get() == self.axish_is10.get(): # Both or neither
            self.hlabel.set_text(self.axish_var.get())

        if self.axisv_islog.get() == 1 and self.axisv_is10.get() == 0: # Only log10
            self.vlabel.set_text("log "+self.axisv_var.get())
        elif self.axisv_islog.get() == 0 and self.axisv_is10.get() == 1: # Only 10^
            self.vlabel.set_text("10^ "+self.axisv_var.get())
        elif self.axisv_islog.get() == self.axisv_is10.get(): # Both or neither
            self.vlabel.set_text(self.axisv_var.get())

            
            
    def update_axes_menu(self,*args):
        # We have to completely re-make the optionmenu lists because tkinter sucks with these.
        self.axish_menu.destroy()
        self.axisv_menu.destroy()
        self.axish_menu = tk.OptionMenu(self.axes_frame,self.axish_var,*self.variables,command=self.draw_plot)
        self.axisv_menu = tk.OptionMenu(self.axes_frame,self.axisv_var,*self.variables,command=self.draw_plot)
        self.axish_menu.config(width=self.axis_menu_width.get())
        self.axisv_menu.config(width=self.axis_menu_width.get())
        self.axish_menu.grid(row=0,column=1)
        self.axisv_menu.grid(row=1,column=1)
        
        
        
       
        
    def load_files(self,*args):
        self.files = []
        for f in self.files_var.get().split(" "):
            if "*" in f:
                self.files.extend(sorted(glob(f)))
            else:
                self.files.extend(glob(f))
                
        self.draw_plot()
        self.corner_message_text.set("File list loaded")
        self.corner_message_label.update_idletasks()

            
    def clear_files(self,*args):
        self.files = []
        self.files_var.set("")

    def read_file(self,*args):
        # Start the "Loading..." message when we start to read the data, and get rid of the message
        # after we have plotted the data (in draw_plot())
        self.corner_message_text.set("Loading...")
        self.corner_message_label.update_idletasks()
        self.data, self.header = read_sph(self.current_file.get())

        if self.data is not None and self.header is not None:
            # This is an SPH file
            self.variables = [ "x",
                               "y",
                               "z",
                               "m",
                               "h",
                               "rho",
                               "vx",
                               "vy",
                               "vz",
                               "vxdot",
                               "vydot",
                               "vzdot",
                               "u",
                               "udot",
                               "grpot",
                               "meanmolecular",
                               "cc",
                               "divv",
                             ]
            self.sph_mode = True
            self.MESA_mode = False
        else:
            # This is some other file

            # Check if it is a mesa file
            header_attr, cols, data = read_mesa(self.current_file.get())
            if header_attr is not None and cols is not None and data is not None:
                keys = np.asarray(list(cols.items()))[:,0]
                values = np.asarray(list(cols.items()))[:,1].astype(int)
                self.variables = keys[np.argsort(values)]
                self.data = data
                self.MESA_mode = True
                self.sph_mode = False
            else:                
                # Unrecognized file format
                self.corner_message_text.set("Unrecognized file type '"+self.current_file.get()+"'")
                self.corner_message_label.update_idletasks()
        
                # Disable the menu buttons
                self.axish_menu.config(state='disabled')
                self.axisv_menu.config(state='disabled')

                self.sph_mode = False
                self.MESA_mode = False
                
                return False
        

        self.axish_menu.config(state='normal')
        self.axisv_menu.config(state='normal')
        
        self.update_axes_menu()
        
        return True
            
        
        



    def plot_data(self,*args):
        if self.data is None or self.axish_var.get() == "" or self.axisv_var.get() == "":
            return
        
        xidx = [i for i in range(0,len(self.variables)) if self.variables[i] == self.axish_var.get()]
        yidx = [i for i in range(0,len(self.variables)) if self.variables[i] == self.axisv_var.get()]
        
        if type(xidx).__name__ == 'list':
            if len(xidx) > 1:
                print("Something went horribly wrong")
                sys.exit()
            xidx = xidx[0]
        if type(yidx).__name__ == 'list':
            if len(yidx) > 1:
                print("Something went horribly wrong")
                sys.exit()
            yidx = yidx[0]

        x = self.data[:,xidx]
        y = self.data[:,yidx]

        if np.all(x > 0):
            self.axish_log_button.config(state='normal')
            if self.axish_islog.get() == 1:
                x = np.log10(x)
        else:
            self.axish_islog.set(0)
            self.axish_log_button.config(state='disabled')
                
                
        if np.all(y > 0):
            self.axisv_log_button.config(state='normal')
            if self.axisv_islog.get() == 1:
                y = np.log10(y)
        else:
            self.axisv_islog.set(0)
            self.axisv_log_button.config(state='disabled')


        if self.axish_is10.get() == 1:
            x = 10.**x
        if self.axisv_is10.get() == 1:
            y = 10.**y
            
            
        if self.sph_mode and not self.MESA_mode: # If we are in SPH mode,
            self.particles.append(self.ax.scatter(x,y,s=1,marker='.',color=self.particle_color.get()))
            core_idx = np.where(self.data[:,12] == 0)[0] # True only in StarSmasher
            if len(core_idx) > 0:
                self.core_particles.append(self.ax.scatter(x[core_idx],y[core_idx],s=1,marker='.',color=self.particle_core_color.get()))
        elif not self.sph_mode and self.MESA_mode: # If we are in MESA mode
            self.particles.append(self.ax.scatter(x,y,s=1,marker='.',color=self.particle_color.get()))
            
        



    def clear_plot(self,*args):
        for particles in self.particles:
            particles.remove()
            self.particles.remove(particles)
        for core_particles in self.core_particles:
            core_particles.remove()
            self.core_particles.remove(core_particles)

    def draw_plot(self,*args):
        # Update the data in the plot
        self.clear_plot()

        if len([i for i in ["x","y","z"] if i == self.axish_var.get() or i == self.axisv_var.get()]) >= 2:
            self.ax.set_aspect('equal')
        else:
            self.ax.set_aspect('auto')

        self.update_axis_labels()
            
        self.plot_data()
        self.ax.relim()
        self.canvas.draw()
        self.corner_message_text.set("")
        
    def next_file(self,*args):
        nxt_idx = self.current_file_idx.get() + self.skip_magnitude.get()
        if nxt_idx >= len(self.files)-1:
            # Reached end of file list
            if self.current_file_idx.get() != len(self.files)-1:
                self.current_file_idx.set(len(self.files)-1)
                self.current_file.set(self.files[-1])
                isread = self.read_file()
                if isread: self.draw_plot()

            self.corner_message_text.set("End of file list")
            self.corner_message_label.update_idletasks()
            self.skip_magnitude_entry.delete(0,'end')
            self.skip_magnitude_entry.insert(0,'1')
            self.skip_magnitude.set(1)
                
            return

        self.current_file_idx.set(nxt_idx)
        self.current_file.set(self.files[self.current_file_idx.get()])
        isread = self.read_file()
        if isread: self.draw_plot()
        
        

    def previous_file(self,*args):
        prev_idx = self.current_file_idx.get() - self.skip_magnitude.get()
        if prev_idx <= 0:
            # Reached beginning of file list
            if self.current_file_idx.get() != 0:
                self.current_file_idx.set(0)
                self.current_file.set(self.files[0])
                isread = self.read_file()
                if isread: self.draw_plot()
                
            self.corner_message_text.set("Start of file list")
            self.corner_message_label.update_idletasks()
            self.skip_magnitude_entry.delete(0,'end')
            self.skip_magnitude_entry.insert(0,'1')
            self.skip_magnitude.set(1)
            
            return

        self.current_file_idx.set(prev_idx)
        self.current_file.set(self.files[self.current_file_idx.get()])
        isread = self.read_file()
        if isread: self.draw_plot()




if __name__ == '__main__':
    root = tk.Tk()
    root.wm_title("PySplash")
    main(root)
    root.mainloop()
